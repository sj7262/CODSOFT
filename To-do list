#include <iostream>
#include <fstream>
#include <vector>
#include <string>

using namespace std;

struct Task {
    int id;
    string description;
    bool completed;
};

vector<Task> loadTasks() {
    vector<Task> tasks;
    ifstream file("tasks.txt");
    Task task;
    while (file >> task.id >> task.completed) {
        file.ignore(); // ignore newline or space
        getline(file, task.description);
        tasks.push_back(task);
    }
    return tasks;
}

void saveTasks(const vector<Task>& tasks) {
    ofstream file("tasks.txt");
    for (const auto& task : tasks) {
        file << task.id << " " << task.completed << " " << task.description << endl;
    }
}

void showTasks(const vector<Task>& tasks) {
    cout << "\n--- To-Do List ---\n";
    for (const auto& task : tasks) {
        cout << task.id << ". [" << (task.completed ? "x" : " ") << "] " << task.description << endl;
    }
}

void addTask(vector<Task>& tasks) {
    Task task;
    cout << "Enter task description: ";
    cin.ignore();
    getline(cin, task.description);
    task.id = tasks.empty() ? 1 : tasks.back().id + 1;
    task.completed = false;
    tasks.push_back(task);
    cout << "Task added!\n";
}

void markCompleted(vector<Task>& tasks) {
    int id;
    cout << "Enter task ID to mark completed: ";
    cin >> id;
    for (auto& task : tasks) {
        if (task.id == id) {
            task.completed = true;
            cout << "Task marked as completed!\n";
            return;
        }
    }
    cout << "Task not found.\n";
}

void deleteTask(vector<Task>& tasks) {
    int id;
    cout << "Enter task ID to delete: ";
    cin >> id;
    for (auto it = tasks.begin(); it != tasks.end(); ++it) {
        if (it->id == id) {
            tasks.erase(it);
            cout << "Task deleted.\n";
            return;
        }
    }
    cout << "Task not found.\n";
}

int main() {
    vector<Task> tasks = loadTasks();
    int choice;
    do {
        cout << "\n--- To-Do List Menu ---\n";
        cout << "1. Show Tasks\n";
        cout << "2. Add Task\n";
        cout << "3. Mark Task as Completed\n";
        cout << "4. Delete Task\n";
        cout << "5. Save and Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: showTasks(tasks); break;
            case 2: addTask(tasks); break;
            case 3: markCompleted(tasks); break;
            case 4: deleteTask(tasks); break;
            case 5: saveTasks(tasks); cout << "Tasks saved. Goodbye!\n"; break;
            default: cout << "Invalid choice.\n";
        }
    } while (choice != 5);

    return 0;
}
